```js
// js/auth.js

/**
 * üîê Authentification Firebase compl√®te
 * Bas√©e sur: https://firebase.google.com/docs/auth?hl=fr
 * Contient:
 * ‚úÖ Inscription
 * ‚úÖ Connexion
 * ‚úÖ D√©connexion
 * ‚úÖ R√¥les + redirection personnalis√©e
 * ‚úÖ S√©curisation d‚Äôacc√®s aux pages
 */

// ‚ö†Ô∏è S'assurer que firebase est initialis√© avant ce fichier
// const auth = firebase.auth();  ‚Üê inutile ici si d√©j√† d√©fini globalement
// const db = firebase.firestore(); ‚Üê idem

// ‚úÖ Inscription (√† utiliser sur register.html)
function inscrire(email, password, pseudo, role = "client") {
  auth.createUserWithEmailAndPassword(email, password)
.then(cred => {
      return db.collection("users").doc(cred.user.uid).set({
        uid: cred.user.uid,
        email,
        pseudo,
        role,
        createdAt: firebase.firestore.FieldValue.serverTimestamp()
});
})
.then(() => {
      alert("‚úÖ Compte cr√©√© avec succ√®s!");
      window.location.href = "dashboard.html";
})
.catch(err => {
      console.error("‚ùå Erreur inscription:", err.message);
      alert("Erreur: " + err.message);
});
}

// üîì Connexion
function connecter(email, password) {
  auth.signInWithEmailAndPassword(email, password)
.then(cred => {
      return db.collection("users").doc(cred.user.uid).get();
})
.then(doc => {
      if (doc.exists) {
        const role = doc.data().role;
        redirigerParRole(role);
} else {
        throw new Error("Utilisateur non trouv√© dans Firestore.");
}
})
.catch(err => {
      console.error("‚ùå Erreur connexion:", err.message);
      alert("Erreur: " + err.message);
});
}

// üîÅ Redirection selon r√¥le
function redirigerParRole(role) {
  switch (role) {
    case "admin":
      window.location.href = "admin.html";
      break;
    case "vendeur":
      window.location.href = "vendor-dashboard.html";
      break;
    default:
      window.location.href = "dashboard.html";
}
}

// üö™ D√©connexion
function deconnecter() {
  auth.signOut()
.then(() => {
      console.log("üëã D√©connect√© avec succ√®s");
      window.location.href = "login.html";
})
.catch(err => {
      console.error("‚ùå Erreur d√©connexion:", err.message);
});
}

// üõ°Ô∏è V√©rifie si utilisateur a acc√®s √† une page prot√©g√©e
function verifierAccesAutorise(rolesAutorises = []) {
  auth.onAuthStateChanged(user => {
    if (user) {
      db.collection("users").doc(user.uid).get()
.then(doc => {
          if (doc.exists) {
            const role = doc.data().role;
            if (!rolesAutorises.includes(role)) {
              alert("‚õî Acc√®s refus√© pour ce r√¥le.");
              window.location.href = "login.html";
}
} else {
            alert("‚õî Utilisateur non reconnu.");
            window.location.href = "login.html";
}
})
.catch(err => {
          console.error("‚ùå Erreur de v√©rification:", err.message);
          window.location.href = "login.html";
});
} else {
      // Non connect√©
      window.location.href = "login.html";
}
});
}
```
